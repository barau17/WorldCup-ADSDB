import os
import pandas as pd
import duckdb
import re

from Utilities.os_utilities import createDirectory
from paths import trustedZoneTables, exploitationDataBaseDir, exploitationZoneTables

# Moving all the data sources from the trusted zone to the exploitation zone where we are going to aggregate all the data for the analysis

def loadDataFromTrustedToExploitationDatabase(trustedZoneTables, exploitationZoneTables):
    try:
        con = duckdb.connect(database=f'{exploitationDataBaseDir}exploitation_WorldCup.duckdb', read_only=False)

        # Define a regular expression pattern to match the table name
        pattern = r"^(.*?)_(\d{4}_\d{2}_\d{2}(?:_\d{6})?)\.csv$"

        files = [f for f in os.listdir(trustedZoneTables) if f.endswith('.csv')]

        for f in files:
            print(os.path.join(trustedZoneTables, f))
            match = re.match(pattern, f)
            if match:
                table_name = match.group(1)
                date = match.group(2)

                if "matches" in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f'CREATE TEMPORARY TABLE temp_Matches AS SELECT * FROM df')
                elif "player" in table_name and "appearances" in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f'CREATE TEMPORARY TABLE temp_Player_Appears AS SELECT * FROM df')
                elif "player" in table_name and "appearances" not in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f'CREATE TEMPORARY TABLE temp_Players AS SELECT * FROM df')
                elif "referee" in table_name and "appearances" in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f'CREATE TEMPORARY TABLE temp_Ref_Appears AS SELECT * FROM df')
                elif "referee" in table_name and "appearances" not in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f'CREATE TEMPORARY TABLE temp_Refs AS SELECT * FROM df')
                elif "team" in table_name and "appearances" in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f"CREATE TEMPORARY TABLE temp_TeamAppears AS SELECT * FROM df")
                elif "squads" in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f"CREATE TEMPORARY TABLE temp_Squads AS SELECT * FROM df")
                elif "tournament" in table_name and "stages" not in table_name and "standings" not in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f"CREATE TEMPORARY TABLE temp_Tournaments AS SELECT * FROM df")
                elif "tournament" in table_name and "stages" in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f"CREATE TEMPORARY TABLE temp_TournamentStages AS SELECT * FROM df")
                elif "tournament" in table_name and "standings" in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f"CREATE TEMPORARY TABLE temp_TournamentStandings AS SELECT * FROM df")
                elif "group" in table_name and "standings" in table_name:
                    df = pd.read_csv(os.path.join(trustedZoneTables, f))
                    con.execute(f"CREATE TEMPORARY TABLE temp_GroupStandings AS SELECT * FROM df")

        # Perform the joins -> Creating a table with players and referee information per match
        con.execute(f'CREATE TEMPORARY TABLE temp_Matches1 AS SELECT * FROM temp_Matches a LEFT JOIN (SELECT * FROM temp_Player_Appears) b ON a.match_id = b.match_id')
        con.execute(f'CREATE TEMPORARY TABLE temp_MatchesF AS SELECT * FROM temp_Matches1 a LEFT JOIN (SELECT * FROM temp_Ref_Appears) b ON a.match_id = b.match_id')

        #Join the player info to the squads table
        con.execute(f"CREATE TEMPORARY TABLE temp_Squads1 AS SELECT * FROM temp_Squads a LEFT JOIN (SELECT * FROM temp_Players) b ON a.player_id = b.player_id")

        #Join player info into team_apearances
        con.execute(f"CREATE TEMPORARY TABLE temp_TeamAppears1 AS SELECT * FROM temp_TeamAppears a LEFT JOIN (SELECT * FROM temp_Player_Appears) b ON (a.team_id = b.team_id AND a.match_id = b.match_id)")

        #Join stages and group standings to tournaments
        con.execute(f"CREATE TEMPORARY TABLE temp_Tournaments1 AS SELECT * FROM temp_Tournaments a LEFT JOIN (SELECT * FROM temp_TournamentStages) b on a.tournament_id = b.tournament_id")
        con.execute(f"CREATE TEMPORARY TABLE temp_Tournaments2 AS SELECT * FROM temp_Tournaments1 a LEFT JOIN (SELECT * FROM temp_TournamentStandings) b on a.tournament_id = b.tournament_id")
        con.execute(f"CREATE TEMPORARY TABLE temp_Tournaments3 AS SELECT * FROM temp_Tournaments2 a LEFT JOIN (SELECT * FROM temp_GroupStandings) b ON (a.tournament_id = b.tournament_id and a.stage_name = b.stage_name)")

        #Join player info on player appearences
        con.execute(f"CREATE TEMPORARY TABLE temp_Players1 AS SELECT * FROM temp_Player_Appears a LEFT JOIN (SELECT * FROM temp_Players) b ON a.player_id = b.player_id")

        #Join refs info on refs appearences
        con.execute(f"CREATE TEMPORARY TABLE temp_Referees1 AS SELECT * FROM temp_Ref_Appears a LEFT JOIN (SELECT * FROM temp_Refs) b ON a.referee_id = b.referee_id")

        # Export them into the Exploitation zone
        con.execute(f'CREATE OR REPLACE TABLE MatchesComplete AS SELECT * FROM temp_MatchesF')
        con.execute(f"CREATE OR REPLACE TABLE SquadsComplete AS SELECT * FROM temp_Squads1")
        con.execute(f"CREATE OR REPLACE TABLE TeamAppearsComplete AS SELECT * FROM temp_TeamAppears1")
        con.execute(f"CREATE OR REPLACE TABLE TournamentsComplete AS SELECT * FROM temp_Tournaments3")
        con.execute(f"CREATE OR REPLACE TABLE PlayersComplete AS SELECT * FROM temp_Players1")
        con.execute(f"CREATE OR REPLACE TABLE RefereesComplete AS SELECT * FROM temp_Referees1")
        # Move the updated table to the Exploitation zone
        destination_path = os.path.join(exploitationZoneTables, f'MatchesComplete.csv')
        con.execute(f"COPY MatchesComplete TO '{destination_path}' (HEADER, DELIMITER ',')")
        destination_path = os.path.join(exploitationZoneTables, f"SquadsComplete.csv")
        con.execute(f"COPY SquadsComplete TO '{destination_path}' (HEADER, DELIMITER ',')")
        destination_path = os.path.join(exploitationZoneTables, f"TeamAppearsComplete.csv")
        con.execute(f"COPY TeamAppearsComplete TO '{destination_path}' (HEADER, DELIMITER ',')")
        destination_path = os.path.join(exploitationZoneTables, f"TournamentsComplete.csv")
        con.execute(f"COPY TournamentsComplete TO '{destination_path}' (HEADER, DELIMITER ',')")

        con.close()  

    except Exception as e:
        print(e)
        con.close()

def main():
    createDirectory(exploitationDataBaseDir)
    createDirectory(exploitationZoneTables)

    loadDataFromTrustedToExploitationDatabase(trustedZoneTables, exploitationZoneTables)

if __name__ == "__main__":
    main()